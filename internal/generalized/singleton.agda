{-# OPTIONS --without-K --safe #-}
module singleton where
open import loopy public hiding (module setup)

record ‚ä§ : Set where
  constructor ‚àó

module setup
  {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ}
  (C : Set ‚Ñì‚ÇÄ)

  (_[>]_ : C ‚Üí C ‚Üí Set ‚Ñì‚ÇÅ)
  (_‚®æ_ : ‚àÄ {a b c} ‚Üí a [>] b ‚Üí b [>] c ‚Üí a [>] c)
  (id : ‚àÄ {a} ‚Üí a [>] a)

  {‚Ñìe‚ÇÄ} (_‚âà_ : ‚àÄ {a b} ‚Üí (f g : a [>] b) ‚Üí Set ‚Ñìe‚ÇÄ)
  (_‚ñ†_      : ‚àÄ {a b} {f g h : a [>] b} ‚Üí f ‚âà g ‚Üí g ‚âà h ‚Üí f ‚âà h)

  (ùüô : C)


  (A : C ‚Üí Set ‚Ñì‚ÇÇ)
  (_¬ª_ : ‚àÄ {a b} ‚Üí (a [>] b) ‚Üí A b ‚Üí A a)

  {‚Ñìe‚ÇÅ} (_A‚âà_ : ‚àÄ {a} ‚Üí A a ‚Üí A a ‚Üí Set ‚Ñìe‚ÇÅ)
  (2idA : ‚àÄ {a} {f : A a} ‚Üí f A‚âà f)
  (transA : ‚àÄ {a} {f g h : A a} ‚Üí f A‚âà g ‚Üí g A‚âà h ‚Üí f A‚âà h)
  (assocA : ‚àÄ {a b c} {f : a [>] b} {g : b [>] c} {h : A c} ‚Üí (f ¬ª (g ¬ª h)) A‚âà ((f ‚®æ g) ¬ª h))
  (¬ª-2map   : ‚àÄ {a b} {f g : a [>] b} ‚Üí f ‚âà g ‚Üí {h : A b} ‚Üí (f ¬ª h) A‚âà (g ¬ª h))


  (a : C)
  (reflect : A ùüô ‚Üí ùüô [>] a)

  (s : C)

  (pack : A s ‚Üí ùüô [>] s)
  where

  module loopy-setup = loopy.setup C _[>]_ _‚®æ_ id _‚âà_ _‚ñ†_ ùüô A _¬ª_ _A‚âà_ 2idA transA assocA ¬ª-2map (Œª{ _ ‚Üí ‚ä§ }) a (Œª{ (x , _) ‚Üí reflect x })
  open loopy-setup public using (module notations)
  Fixpoint : A a ‚Üí Set (‚Ñì‚ÇÇ ‚äî ‚Ñìe‚ÇÅ)
  Fixpoint f = Œ£[ x ‚àà A ùüô ] (x A‚âà (reflect x ¬ª f))

  module loopy-conditions‚ÇÅ = loopy-setup.conditions‚ÇÅ s (Œª{ _ ‚Üí ‚ä§ }) (Œª{ (x , _) ‚Üí pack x }) (Œª{ _ ‚Üí ‚àó })
  introspect : A s ‚Üí A ùüô
  introspect t = fst (loopy-conditions‚ÇÅ.introspect (t , ‚àó))

  module conditions
    (key : s [>] a)
    (key-law : ‚àÄ {t : A s} ‚Üí (pack t ‚®æ key) ‚âà reflect (introspect t))

    (f : A a)
    where

    module loopy-conditions‚ÇÇ = loopy-conditions‚ÇÅ.conditions‚ÇÇ key key-law f
    open loopy-conditions‚ÇÇ public using (t)

    module loopy-theorem = loopy-conditions‚ÇÇ.theorem ‚àó
    fixpt : Fixpoint f
    fixpt = fst (fst loopy-theorem.fixpt) , loopy-theorem.fixpt.proof
