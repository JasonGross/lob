{-# OPTIONS --without-K --allow-unsolved-metas #-}
module lawvere-factored-alt where
open import Agda.Primitive
  using    (Level; _‚äî_; lzero; lsuc; Setœâ)
record CartesianClosedCat {‚Ñì‚ÇÄ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} : Set (lsuc (‚Ñì‚ÇÄ ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)) where
  field
    Obj   : Set ‚Ñì‚ÇÄ
    _[>]_ : Obj ‚Üí Obj ‚Üí Set ‚Ñì‚ÇÅ
    _‚âà_   : ‚àÄ {a b} ‚Üí (a [>] b) ‚Üí (a [>] b) ‚Üí Set ‚Ñì‚ÇÇ
    id    : ‚àÄ {a} ‚Üí a [>] a
    _‚®æ_   : ‚àÄ {a b c} ‚Üí a [>] b ‚Üí b [>] c ‚Üí a [>] c
    ùüô     : Obj
    _√ó_   : Obj ‚Üí Obj ‚Üí Obj
    dup   : ‚àÄ {a} ‚Üí a [>] (a √ó a)
    _√ó√ó_  : ‚àÄ {a b c d} ‚Üí a [>] c ‚Üí b [>] d ‚Üí (a √ó b) [>] (c √ó d)
    getl  : ‚àÄ {a b} ‚Üí (a √ó b) [>] a
    getr  : ‚àÄ {a b} ‚Üí (a √ó b) [>] b
    _~>_   : Obj ‚Üí Obj ‚Üí Obj
    curry : ‚àÄ {a b c} ‚Üí ((a √ó b) [>] c) ‚Üí (a [>] (b ~> c))
    apply : ‚àÄ {a b} ‚Üí (((a ~> b) √ó a) [>] b)
    *     : ‚àÄ {a} ‚Üí (a [>] ùüô)

    _‚ñ†_      : ‚àÄ {a b} {f g h : a [>] b} ‚Üí f ‚âà g ‚Üí g ‚âà h ‚Üí f ‚âà h
    _‚Åª¬π      : ‚àÄ {a b} {f g : a [>] b} ‚Üí f ‚âà g ‚Üí g ‚âà f
    2id      : ‚àÄ {a b} {f : a [>] b} ‚Üí f ‚âà f
    _‚®æ-map_ : ‚àÄ {a b c} {f f‚Äµ : a [>] b} {g g‚Äµ : b [>] c} ‚Üí f ‚âà f‚Äµ ‚Üí g ‚âà g‚Äµ ‚Üí (f ‚®æ g) ‚âà (f‚Äµ ‚®æ g‚Äµ)

    lid   : ‚àÄ {a b} {f : a [>] b} ‚Üí (id ‚®æ f) ‚âà f
    rid   : ‚àÄ {a b} {f : a [>] b} ‚Üí (f ‚®æ id) ‚âà f
    assoc : ‚àÄ {a b c d} {f : a [>] b} {g : b [>] c} {h : c [>] d}
            ‚Üí ((f ‚®æ g) ‚®æ h) ‚âà (f ‚®æ (g ‚®æ h))

    *-law : ‚àÄ {a} {f g : a [>] ùüô} ‚Üí f ‚âà g
    √ó√óid  : ‚àÄ {a b} ‚Üí (id {a} √ó√ó id {b}) ‚âà id
    dup-getl : ‚àÄ {a} ‚Üí (dup {a} ‚®æ getl) ‚âà id
    dup-getr : ‚àÄ {a} ‚Üí (dup {a} ‚®æ getr) ‚âà id
    √ó√ó-natural : ‚àÄ {a b c a‚Ä≤ b‚Ä≤ c‚Ä≤} {f : a [>] b} {g : b [>] c} {f‚Ä≤ : a‚Ä≤ [>] b‚Ä≤} {g‚Ä≤ : b‚Ä≤ [>] c‚Ä≤}
                 ‚Üí ((f ‚®æ g) √ó√ó (f‚Ä≤ ‚®æ g‚Ä≤)) ‚âà ((f √ó√ó f‚Ä≤) ‚®æ (g √ó√ó g‚Ä≤))
    dup-natural : ‚àÄ {a b} {f : a [>] b} ‚Üí (dup ‚®æ (f √ó√ó f)) ‚âà (f ‚®æ dup)
    getl-natural : ‚àÄ {a b a‚Ä≤ b‚Ä≤} {f : a [>] b} {f‚Ä≤ : a‚Ä≤ [>] b‚Ä≤}
                   ‚Üí ((f √ó√ó f‚Ä≤) ‚®æ getl) ‚âà (getl ‚®æ f)
    getr-natural : ‚àÄ {a b a‚Ä≤ b‚Ä≤} {f : a [>] b} {f‚Ä≤ : a‚Ä≤ [>] b‚Ä≤}
                   ‚Üí ((f √ó√ó f‚Ä≤) ‚®æ getr) ‚âà (getr ‚®æ f‚Ä≤)

    exp-œÅ : ‚àÄ {a b c} {f : (a √ó b) [>] c}
            ‚Üí ((curry f √ó√ó id) ‚®æ apply) ‚âà f
    exp-Œæ : ‚àÄ {a b c} {f : a [>] (b ~> c)}
            ‚Üí curry ((f √ó√ó id) ‚®æ apply) ‚âà f

-- some bits of a Presheaf/Family-like object
record Presheaf {‚Ñì‚ÇÄ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñìp‚ÇÄ ‚Ñìp‚ÇÅ ‚Ñìe‚ÇÇ ‚Ñìp‚ÇÇ} (C : CartesianClosedCat {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ}) : Set (‚Ñì‚ÇÄ ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî lsuc (‚Ñìp‚ÇÄ ‚äî ‚Ñìp‚ÇÅ ‚äî ‚Ñìe‚ÇÇ ‚äî ‚Ñìp‚ÇÇ)) where
  open CartesianClosedCat C
  field
    Psh  : Obj ‚Üí Set ‚Ñìp‚ÇÄ
    Œ†    : ‚àÄ {a} ‚Üí Psh a ‚Üí Psh a ‚Üí Set ‚Ñìp‚ÇÅ
  Œ†_[‚Üí]_ : ‚àÄ {a} ‚Üí Psh a ‚Üí Psh a ‚Üí Set ‚Ñìp‚ÇÅ
  Œ†_[‚Üí]_ = Œ†
  Œ†[_]_[‚Üí]_ : ‚àÄ a ‚Üí Psh a ‚Üí Psh a ‚Üí Set ‚Ñìp‚ÇÅ
  Œ†[ a ] x [‚Üí] y = Œ† {a} x y
  field
    _‚âà‚Çë_ : ‚àÄ {a} ‚Üí Psh a ‚Üí Psh a ‚Üí Set ‚Ñìp‚ÇÇ -- equivalence of categories or w/e
    --_‚âà‚Çö_ : ‚àÄ {a x y} ‚Üí (Œ†[ a ] x [‚Üí] y) ‚Üí (Œ†[ a ] x [‚Üí] y) ‚Üí Set ‚Ñìp‚ÇÇ

    Œ†id  : ‚àÄ {a x} ‚Üí Œ†[ a ] x [‚Üí] x
    _‚®æ‚Çö_ : ‚àÄ {a} {x y z : Psh a} ‚Üí Œ† x [‚Üí] y ‚Üí Œ† y [‚Üí] z ‚Üí Œ† x [‚Üí] z

    _‚®æ‚Çõ_ : ‚àÄ {a b} ‚Üí (a [>] b) ‚Üí Psh b ‚Üí Psh a

    _Œ†‚®æ‚Çõ_ : ‚àÄ {a b x y} ‚Üí (f : a [>] b) ‚Üí Œ†[ b ] x [‚Üí] y ‚Üí Œ†[ a ] (f ‚®æ‚Çõ x) [‚Üí] (f ‚®æ‚Çõ y)

    --_‚ñ†‚Çö_   : ‚àÄ {a x y} {f g h : Œ†[ a ] x [‚Üí] b} ‚Üí f ‚âà‚Çö g ‚Üí g ‚âà‚Çö h ‚Üí f ‚âà‚Çö h
    --_‚Åª¬π‚Çö   : ‚àÄ {a x y} {f g   : Œ†[ a ] x [‚Üí] b} ‚Üí f ‚âà‚Çö g ‚Üí g ‚âà‚Çö f
    --2id‚Çö   : ‚àÄ {a x y} {f     : Œ†[ a ] x [‚Üí] b} ‚Üí f ‚âà‚Çö f
    --_‚®æ-map‚Çö_

    --lid‚Çö   : ‚àÄ {a x y} {f : Œ†[ a ] x [‚Üí] y} ‚Üí (id‚Çö ‚®æ‚Çö f) ‚âà‚Çö f
    --rid‚Çö   : ‚àÄ {a x y} {f : Œ†[ a ] x [‚Üí] y} ‚Üí (f ‚®æ‚Çö id‚Çö) ‚âà‚Çö f
    --assoc‚Çö : ‚àÄ {a} {x y z w : Psh a} {f : Œ† x [‚Üí] y} {g : Œ† y [‚Üí] z} {h : Œ† z [‚Üí] w}
    --         ‚Üí (f ‚®æ‚Çö (g ‚®æ‚Çö h)) ‚âà‚Çö ((f ‚®æ‚Çö g) ‚®æ‚Çö h)

    -- TODO: interaction of ‚âà‚Çë and ‚âà‚Çö
    -- TODO: id Œ†‚®æ‚Çõ f = f
    -- TODO: f Œ†‚®æ‚Çõ Œ†id = Œ†id
    -- TODO: (f ‚®æ g) Œ†‚®æ‚Çõ h = f Œ†‚®æ‚Çõ (g ‚®æ‚Çõ h)

    _‚ñ†‚Çë_   : ‚àÄ {a} {x y z : Psh a} ‚Üí x ‚âà‚Çë y ‚Üí y ‚âà‚Çë z ‚Üí x ‚âà‚Çë z
    _‚Åª¬π‚Çë   : ‚àÄ {a} {x y : Psh a} ‚Üí x ‚âà‚Çë y ‚Üí y ‚âà‚Çë x
    2id‚Çë   : ‚àÄ {a} {x : Psh a} ‚Üí x ‚âà‚Çë x

    subst-id  : ‚àÄ {a} {x : Psh a} ‚Üí (id ‚®æ‚Çõ x) ‚âà‚Çë x
    subst-‚®æ   : ‚àÄ {a b c} {f : a [>] b} {g : b [>] c} {x : Psh c} ‚Üí ((f ‚®æ g) ‚®æ‚Çõ x) ‚âà‚Çë (f ‚®æ‚Çõ (g ‚®æ‚Çõ x))
    subst-map : ‚àÄ {a b} {f g : a [>] b} {x : Psh b} ‚Üí f ‚âà g ‚Üí (f ‚®æ‚Çõ x) ‚âà‚Çë (g ‚®æ‚Çõ x)

record PresheafHasŒ£ {‚Ñì‚ÇÄ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñìp‚ÇÄ ‚Ñìp‚ÇÅ ‚Ñìe‚ÇÇ ‚Ñìp‚ÇÇ} {C : CartesianClosedCat {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ}}
                    (T : Presheaf {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {‚Ñìp‚ÇÄ} {‚Ñìp‚ÇÅ} {‚Ñìe‚ÇÇ} {‚Ñìp‚ÇÇ} C)
                    : Set (‚Ñì‚ÇÄ ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñìp‚ÇÄ ‚äî ‚Ñìp‚ÇÅ ‚äî ‚Ñìe‚ÇÇ ‚äî ‚Ñìp‚ÇÇ) where
  open CartesianClosedCat C
  open Presheaf T
  field
    Wk     : Obj ‚Üí Psh ùüô -- weakening over the terminal context
    Wk-map : ‚àÄ {a b} ‚Üí a [>] b ‚Üí Œ† (Wk a) [‚Üí] (Wk b)
    -- TODO: id and ‚®æ laws targeting ‚âà‚Çö

  ùüô‚Çö : ‚àÄ {a} ‚Üí Psh a
  ùüô‚Çö = * ‚®æ‚Çõ Wk ùüô

  field
    Œ£ : ‚àÄ {a : Obj} ‚Üí Psh a ‚Üí Obj

    dupŒ£ : ‚àÄ {a} ‚Üí a [>] Œ£ {a} ùüô‚Çö
    _Œ£Œ£_ : ‚àÄ {a b x y} ‚Üí (f : a [>] b) ‚Üí (Œ†[ a ] x [‚Üí] (f ‚®æ‚Çõ y)) ‚Üí (Œ£ {a} x [>] Œ£ {b} y)
    fst  : ‚àÄ {a x} ‚Üí Œ£ {a} x [>] a
    snd  : ‚àÄ {a x} ‚Üí Œ†[ Œ£ {a} x ] ùüô‚Çö [‚Üí] (fst ‚®æ‚Çõ x)

    -- Œ£-map-id : ‚àÄ {a x} ‚Üí (id Œ£Œ£ Œ†id) ‚âà id {Œ£ {a} x} -- needs x = (id ‚®æ‚Çõ x)
    dup-fst : ‚àÄ {a} ‚Üí (dupŒ£ {a} ‚®æ fst) ‚âà id
    dup-snd : ‚àÄ {a x} ‚Üí (dupŒ£ {Œ£ {a} x} ‚®æ (fst Œ£Œ£ snd)) ‚âà id
    --Œ£Œ£-natural : ‚àÄ {a b c x y z} {f : a [>] b} {g : b [>] c} {F : Œ†[ a ] x [‚Üí] (f ‚®æ‚Çõ y)} {G : Œ†[ b ] y [‚Üí] (g ‚®æ‚Çõ z)}
    --             ‚Üí ((f ‚®æ g) Œ£Œ£ (F ‚®æ‚Çö {!f Œ†‚®æ‚Çõ G!})) ‚âà ((f Œ£Œ£ F) ‚®æ (g Œ£Œ£ G)) -- needs (f ‚®æ g) ‚®æ‚Çõ z = f ‚®æ‚Çõ (g ‚®æ‚Çõ z)
    --dup-Œ£Œ£ : ‚àÄ {a b} {f : a [>] b} ‚Üí (dupŒ£ ‚®æ (f Œ£Œ£ {!Œ†id or wk-map *!})) ‚âà (f ‚®æ dupŒ£) -- needs f ‚®æ‚Çõ (* ‚®æ‚Çõ Wk ùüô) = (* ‚®æ‚Çõ Wk ùüô)

    pair : ‚àÄ {a b y} ‚Üí (f : a [>] b) ‚Üí (Œ†[ a ] ùüô‚Çö [‚Üí] (f ‚®æ‚Çõ y)) ‚Üí (a [>] Œ£ {b} y) -- duplicative
{-
    -- alt formulation, also requires too many casts
    fst  : ‚àÄ {a x} ‚Üí Œ£ {a} x [>] a
    snd  : ‚àÄ {a x} ‚Üí Œ†[ Œ£ {a} x ] ùüô‚Çö [‚Üí] (fst ‚®æ‚Çõ x)

    pair-fst : ‚àÄ {a b y f g} ‚Üí (pair {a} {b} {y} f g ‚®æ fst) ‚âà f
    -- pair-snd : ‚àÄ {a b y f g} ‚Üí (pair {a} {b} {y} f g ‚®æ‚Çõ snd) ‚âà‚Çö g
    -- pair-Œæ   : ‚àÄ {a b y} {f : a [>] Œ£ {b} y} ‚Üí (pair (f ‚®æ fst) {!f Œ†‚®æ‚Çõ snd!}) ‚âà f -- needs ((f ‚®æ fst) ‚®æ‚Çõ y) = (f ‚®æ‚Çõ (fst ‚®æ‚Çõ y))
-}


    pair-wk : ‚àÄ {a x} ‚Üí Œ†[ a ] x [‚Üí] (* ‚®æ‚Çõ Wk (Œ£ {a} x))
    ùüô-law   : ‚àÄ {a} ‚Üí Œ£ (Wk a) [>] a
    -- TODO: more rules about Œ£
    -- œÅ‚ÇÅ : (Œ£.Œº * Œπ); Œµ = id
    -- œÅ‚ÇÇ : Œπ; (Œº Œµ)[*] = id
    -- Œº-natural : Œº (p; q) = Œº p; Œº q
    -- Œπ-natural : Œπ; Œº (Œ£.Œº f g) = g; Œπ[f]
    -- Œµ-natural : (Œ£.Œº * (Œº p)); Œµ = Œµ; p
    -- alt: uncurryŒ£ : ‚àÄ {a b x} ‚Üí (Œ£ {a} x [>] b) ‚Üí (Œ†[ a ] x [‚Üí] (* ‚®æ‚Çõ Wk b))
    uncurryŒ£ : ‚àÄ {a b x} ‚Üí (Œ£ {a} x [>] b) ‚Üí (Œ†[ a ] x [‚Üí] (* ‚®æ‚Çõ Wk b))


-- a semicomonad that codistributes over ùüô and _√ó_ (since behavior of
-- _~>_ is determined by _√ó_, we do not need any laws about
-- interaction with _~>_) and Œ£
record CodistributiveSemicomonad {‚Ñì‚ÇÄ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñìp‚ÇÄ ‚Ñìp‚ÇÅ ‚Ñìe‚ÇÇ ‚Ñìp‚ÇÇ} (C : CartesianClosedCat {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ})
                                 (T : Presheaf {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {‚Ñìp‚ÇÄ} {‚Ñìp‚ÇÅ} {‚Ñìe‚ÇÇ} {‚Ñìp‚ÇÇ} C)
                                 (TŒ£ : PresheafHasŒ£ T)
                                 : Set (‚Ñì‚ÇÄ ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñìp‚ÇÄ ‚äî ‚Ñìp‚ÇÅ ‚äî ‚Ñìe‚ÇÇ ‚äî ‚Ñìp‚ÇÇ) where
  open CartesianClosedCat C
  field
    ‚ñ°     : Obj ‚Üí Obj
    ‚ñ°-map : ‚àÄ {a b} ‚Üí a [>] b ‚Üí ‚ñ° a [>] ‚ñ° b

    cojoin : ‚àÄ {a} ‚Üí ‚ñ° a [>] ‚ñ° (‚ñ° a)

    ‚ñ°-ùüô-codistr  : ùüô [>] ‚ñ° ùüô
    ‚ñ°-√ó-codistr  : ‚àÄ {a b} ‚Üí (‚ñ° a √ó ‚ñ° b) [>] ‚ñ° (a √ó b)

    ‚ñ°-id    : ‚àÄ {a} ‚Üí ‚ñ°-map (id {a}) ‚âà id
    ‚ñ°-‚®æ-map : ‚àÄ {a b c} {f : a [>] b} {g : b [>] c} ‚Üí ‚ñ°-map (f ‚®æ g) ‚âà (‚ñ°-map f ‚®æ ‚ñ°-map g)

    ‚ñ°-2map  : ‚àÄ {a b} {f f‚Ä≤ : a [>] b} ‚Üí (f ‚âà f‚Ä≤) ‚Üí (‚ñ°-map f) ‚âà (‚ñ°-map f‚Ä≤)

    -- points are quoted with `‚ñ°-ùüô-codistr ‚®æ ‚ñ°-map`, quoted terms are
    -- requoted with `cojoin`; these must agree on closed quoted terms
    ‚ñ°-map-cojoin : ‚àÄ {a} {f : ùüô [>] ‚ñ° a} ‚Üí (f ‚®æ cojoin) ‚âà (‚ñ°-ùüô-codistr ‚®æ ‚ñ°-map f)

    ‚ñ°-√ó-codistr-dup  : ‚àÄ {a} ‚Üí (dup {‚ñ° a} ‚®æ ‚ñ°-√ó-codistr) ‚âà ‚ñ°-map dup
    ‚ñ°-map-√ó√ó-codistr : ‚àÄ {a b c d} {f : a [>] b} {g : c [>] d}
                       ‚Üí ((‚ñ°-map f √ó√ó ‚ñ°-map g) ‚®æ ‚ñ°-√ó-codistr) ‚âà (‚ñ°-√ó-codistr ‚®æ ‚ñ°-map (f √ó√ó g))

  open Presheaf T
  open PresheafHasŒ£ TŒ£
  field
    ‚ñ°‚Çö : ‚àÄ {a} ‚Üí Psh a ‚Üí Psh (‚ñ° a)
    -- TODO: other fields

    ‚ñ°-Wk-codistr : ‚àÄ {a} ‚Üí Œ†[ ùüô ] (Wk (‚ñ° a)) [‚Üí] (‚ñ°-ùüô-codistr ‚®æ‚Çõ ‚ñ°‚Çö (Wk a))
    ‚ñ°-Œ£-codistr : ‚àÄ {a x} ‚Üí (Œ£ {‚ñ° a} (‚ñ°‚Çö x)) [>] (‚ñ° (Œ£ {a} x))

    ‚ñ°-map-subst : ‚àÄ {a b x} {f : a [>] b} ‚Üí (‚ñ°-map f ‚®æ‚Çõ ‚ñ°‚Çö x) ‚âà‚Çë ‚ñ°‚Çö (f ‚®æ‚Çõ x)

module generic
  {‚Ñì‚ÇÄ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñìt‚ÇÄ ‚Ñìt‚ÇÅ ‚Ñìte‚ÇÇ ‚Ñìt‚ÇÇ ‚Ñìty‚ÇÄ ‚Ñìty‚ÇÅ ‚Ñìtye‚ÇÇ ‚Ñìty‚ÇÇ}
  (CCat : CartesianClosedCat {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ})
  (TyCat : Presheaf {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {‚Ñìty‚ÇÄ} {‚Ñìty‚ÇÅ} {‚Ñìtye‚ÇÇ} {‚Ñìty‚ÇÇ} CCat)
  (TCat : Presheaf {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {‚Ñìt‚ÇÄ} {‚Ñìt‚ÇÅ} {‚Ñìte‚ÇÇ} {‚Ñìt‚ÇÇ} CCat) -- like (_[>] X)
  (TyŒ£ : PresheafHasŒ£ TyCat)
  (‚ñ°Func : CodistributiveSemicomonad CCat TyCat TyŒ£)
  where

  open CartesianClosedCat CCat renaming (Obj to C)
  open Presheaf hiding (Œ†_[‚Üí]_ ; Œ†[_]_[‚Üí]_ ; _‚âà‚Çë_ ; _‚®æ‚Çö_ ; _‚®æ‚Çõ_ ; _Œ†‚®æ‚Çõ_ ; _‚ñ†‚Çë_ ; _‚Åª¬π‚Çë)
  open Presheaf TyCat using (Œ†_[‚Üí]_ ; Œ†[_]_[‚Üí]_ ; _‚âà‚Çë_ ; _‚®æ‚Çö_ ; _‚®æ‚Çõ_ ; _Œ†‚®æ‚Çõ_ ; _‚ñ†‚Çë_ ; _‚Åª¬π‚Çë) renaming (Psh to Ty)
  -- arrows in T are unused
  open Presheaf TCat using () renaming (Psh to T ; _‚âà‚Çë_ to _‚âàT_ ; _‚®æ‚Çõ_ to _‚®æT_ ; _‚ñ†‚Çë_ to _‚ñ†T_ ; _‚Åª¬π‚Çë to _‚Åª¬πT)
  open PresheafHasŒ£ TyŒ£
  open CodistributiveSemicomonad ‚ñ°Func

  module inner
    (QT : C) -- (Œ£ {ùüô} (* ‚®æ‚Çõ ‚ñ°‚ÇöT))
    (‚ñ°-map-QT : ‚àÄ {a} ‚Üí T a ‚Üí (‚ñ° a [>] QT)) -- not quite sure how this fits with the above, but it captures that QT is ‚ñ° (T ùüô) and maps into QT are like maps into ‚ñ° (T ùüô) i.e., Wk a ~> T is like T a by substitution
    -- incomplete musing: we need an analogue of (‚ñ°‚ÇöT : Presheaf ‚ñ°C) and of `_‚®æ‚Çõ_ : (Œ£ R [>] ‚ñ° (Œ£ P)) ‚Üí (‚ñ°‚ÇöT (‚ñ° (Œ£ P))) ‚Üí ‚ñ°‚ÇöT (Œ£ R)`, and ...
    -- incomplete musing: `Wk.uncurry (Œ£.Œπ/dup ‚®æ fst)` gives `Œ†[ a ] ùüô [‚Üí] (* ‚®æ‚Çõ Wk a)`, `pair *` gives `(Œ†[ a ] (ùüô [‚Üí] (* ‚®æ‚Çõ ‚ñ°‚ÇöT))) ‚Üí (ùüô [>] Œ£ a ‚ñ°‚ÇöT)`, `‚ñ°‚Çöf : ‚ñ°‚ÇöT (‚ñ° (Œ£ P))`, if we treat `f` as  analogue of ‚ñ°‚Çö gives us T a ‚Üí ‚ñ°T (‚ñ°a),

    (S : C) -- Œî (T (Œ£_‚ñ°S R))
    (P : Ty QT)
    (R : Ty (‚ñ° S))

    -- TODO: we can eliminate this assumption by manually supplying R' ‚âî Œ£ R quote-r, and then using wk-map cojoin to quote quote-r or something
    (quote-r : Œ†[ ‚ñ° S ] R [‚Üí] (cojoin ‚®æ‚Çõ ‚ñ°‚Çö R))

    (œï : T (S √ó Œ£ R))
    (œà : T (Œ£ R) ‚Üí (ùüô [>] S))
    (f : T (Œ£ P))
    where

    quote-R : Œ£ R [>] ‚ñ° (Œ£ R)
    quote-R = (cojoin Œ£Œ£ quote-r) ‚®æ ‚ñ°-Œ£-codistr

    pre-unwrap : Œ£ R [>] QT
    pre-unwrap = (dup ‚®æ (fst √ó√ó quote-R)) ‚®æ (‚ñ°-√ó-codistr ‚®æ ‚ñ°-map-QT œï)

    module inner
      (r2p : Œ†[ Œ£ R ] ùüô‚Çö [‚Üí] (pre-unwrap ‚®æ‚Çõ P))
      where

      unwrap : T (Œ£ R)
      unwrap = pair pre-unwrap r2p ‚®æT f

      rewrap : ùüô [>] S
      rewrap = œà unwrap

      module inner
        (r : Œ†[ ùüô ] ùüô‚Çö [‚Üí] ((‚ñ°-ùüô-codistr ‚®æ ‚ñ°-map rewrap) ‚®æ‚Çõ R))
        where

        lawvere : T ùüô
        lawvere = pair (‚ñ°-ùüô-codistr ‚®æ ‚ñ°-map rewrap) r ‚®æT unwrap
      open inner public
    open inner hiding (module inner) public
  open inner hiding (module inner) public
  -- TODO: P lawvere
  -- TODO: fixpoint equation
